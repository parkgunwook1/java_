아이템 2
- 생성자에 매개변수가 많다면 빌더를 고려하라

정적 팩터리와 생성자에는 똑같은 제약이 있다. 선택적 매개변수가 많을 때 적절히 대응하기 어렵다.
20개 넘는 매개변수가 있을 때, 점층적 생성자 패턴을 즐겨 사용했다.
점층적 방식 => 1개 받는 생성자, 2개받는 생성자,.. 형태로 전부 다 받는 생성자까지 늘려가는 방식이다.

점층적 생성자 패턴도 쓸 수는 있지만, 매개변수 개수가 많아지면 클라이언트 코드를 작성하거나 읽기 어렵다.

선택 매개변수가 많을 때 활용할 수 있는 두 번째 대안인 자바빈즈 패턴을 봐보겠다. 매개변수가 없는 생성자로 객체를 만든 후,
세터(setter) 메서드들을 호출해 원하는 매개변수의 값을 설정하는 방식이다.
자바빈즈 패턴 => 매개변수가 없는 생성자로 객체를 만든 후 세터 메서드들을 호출해 원하는 매개변수의 값을 설정하는 방식이다.

객체.메서드명 으로 접근할 수 있기 때문에, 인스턴스를 만들기 쉽고, 그 결과 더 읽기 쉬운 코드가 된다.

하지만 자바빈즈는 자신만의 심각한 단점을 지니고 있다. 자바빈즈 패턴에서는 개체 하나를 만드려면 메서드를 여러 개 호출해야 되고,
객체가 완전히 생성되기 전까지는 일관성이 무너진 상태에 놓이게 된다.

빌더 패턴은 계층적으로 설계된 클래스와 함께 쓰기에 좋다.
그리고 빌더 패턴은 상당히 유연하다. 빌더 하나로 여러 객체를 순회하면서 만들 수 있고, 빌더에 남기는 매개변수에 따라 다른 객체를 만들 수도 있다.
객체마다 부여되는 일련번호와 같은 특정 필드는 빌더가 알아서 채우도록 할 수도 있다.

빌더 패턴에 장점만 있는 것은 아니다. 객체를 만드려면, 그에 앞서 빌더부터 만들어야한다. 빌더 생성 비용이 크지는 않지만 성능에
민감한 상황에서는 문제가 될 수 있다.
또한 점층적 생성자 패턴보다는 코드가 장황해서 매개변수가 4개 이상은 되어야 값어치를 한다. 하지만 API는 시간이 지날수록 매개변수가 많아지는 경향이 있음을 명심하자.

핵심정리
- 생성자나 정적 팩터리가 처리해야 할 때 매개변수가 많다면 빌더 패턴을 선택하는 게 더 낫다. 매개변수 중 다수가 필수가 아니거나
같은 타입이면 특히 더 그렇다. 빌더는 점층적 생성자보다 클라이언트 코드를 읽고, 쓰기가 훨씬 간결하고, 자바빈즈보다 훨씬 안전하다.