아이템 1
- 생성자 대신 정적 팩터리 메서드를 고려하라
클라이언트가 클래스의 인스턴스를 얻는 전톡적인 수단은 public 생성자다.
하지만 클래스는 생성자와 별도로 정적 팩터리 메서드를 제공할 수 있다. 그 클래스의 인스턴스를 반환하는 단순한 정적 메서드이다.

정적 팩토리 메서드란?
정적(static).팩토리(factory).메서드(method)
정적 팩토리 메서드란 객체 생성의 역할을 하는 클래스 메서드라는 의미로 요약해볼 수 있다.

객체를 생성하는 역할은 자바에서 제공하는 "생성자"가 하는데, 왜 정적 팩토리 메서드를 따로 만들어서 객체를 생성할까?
1. 생성자는 반환될 객체의 이름을 가질 수 없다. 반면 정적 팩터리는 이름만 잘 지으면 특성을 쉽게 묘사할 수 있다.
2. 호출될 때마다 인스턴스를 새로 생성하지는 않아도 된다. (반복되는 요청 객체 반환하는 식으로 정적 팩터리 방식은 인스턴스를 철저히 통제할 수 있다.)
3. 반환 타입의 하위 타입 객체를 반환할 수 있는 능력이 있다.
4. 입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있다.
5. 정적 팩터리 메서드를 작성하는 시점에는 반환할 객체의 클래스가 존재하지 않아도 된다. (대표적 프레임워크 JDBC)


아이템 2
- 생성자에 매개변수가 많다면 빌더를 고려하라

정적 팩터리와 생성자에는 똑같은 제약이 있다. 선택적 매개변수가 많을 때 적절히 대응하기 어렵다.
20개 넘는 매개변수가 있을 때, 점층적 생성자 패턴을 즐겨 사용했다.
점층적 방식 => 1개 받는 생성자, 2개받는 생성자,.. 형태로 전부 다 받는 생성자까지 늘려가는 방식이다.

점층적 생성자 패턴도 쓸 수는 있지만, 매개변수 개수가 많아지면 클라이언트 코드를 작성하거나 읽기 어렵다.

선택 매개변수가 많을 때 활용할 수 있는 두 번째 대안인 자바빈즈 패턴을 봐보겠다. 매개변수가 없는 생성자로 객체를 만든 후,
세터(setter) 메서드들을 호출해 원하는 매개변수의 값을 설정하는 방식이다.
자바빈즈 패턴 => 매개변수가 없는 생성자로 객체를 만든 후 세터 메서드들을 호출해 원하는 매개변수의 값을 설정하는 방식이다.

객체.메서드명 으로 접근할 수 있기 때문에, 인스턴스를 만들기 쉽고, 그 결과 더 읽기 쉬운 코드가 된다.

하지만 자바빈즈는 자신만의 심각한 단점을 지니고 있다. 자바빈즈 패턴에서는 개체 하나를 만드려면 메서드를 여러 개 호출해야 되고,
객체가 완전히 생성되기 전까지는 일관성이 무너진 상태에 놓이게 된다.

빌더 패턴은 계층적으로 설계된 클래스와 함께 쓰기에 좋다.
그리고 빌더 패턴은 상당히 유연하다. 빌더 하나로 여러 객체를 순회하면서 만들 수 있고, 빌더에 남기는 매개변수에 따라 다른 객체를 만들 수도 있다.
객체마다 부여되는 일련번호와 같은 특정 필드는 빌더가 알아서 채우도록 할 수도 있다.

빌더 패턴에 장점만 있는 것은 아니다. 객체를 만드려면, 그에 앞서 빌더부터 만들어야한다. 빌더 생성 비용이 크지는 않지만 성능에
민감한 상황에서는 문제가 될 수 있다.
또한 점층적 생성자 패턴보다는 코드가 장황해서 매개변수가 4개 이상은 되어야 값어치를 한다. 하지만 API는 시간이 지날수록 매개변수가 많아지는 경향이 있음을 명심하자.

핵심정리
- 생성자나 정적 팩터리가 처리해야 할 때 매개변수가 많다면 빌더 패턴을 선택하는 게 더 낫다. 매개변수 중 다수가 필수가 아니거나
같은 타입이면 특히 더 그렇다. 빌더는 점층적 생성자보다 클라이언트 코드를 읽고, 쓰기가 훨씬 간결하고, 자바빈즈보다 훨씬 안전하다.


아이템 3
  - private 생성자나 열거 타입으로 싱글턴임을 보증하라

싱글턴이란 인스턴스를 오직 하나만 생성할 수 있는 클래스를 말한다. 싱글턴의 전형적인 예로는 함수와 같은 무상태(stateless) 객체나 설계상 유일해야 하는 시스템 컴포넌트를 들 수 있다.
그런데 클래스를 싱글턴으로 만들면 이를 사용하는 클라이언트를 테스트하기가 어려워질 수 있다.

싱글턴을 만드는 방식은 보통 둘 중 하나에 있다.
두 방식 모두 생성자는 private으로 감춰두고, 유일한 인스턴스에 접근할 수 있는 수단으로 public static 멤버를 하나 마련해둔다.


- 첫 번째 public static final 필드 방식의 싱글턴

public class Elvis {
   public static final Elvis INSTANCE = new Elvis();
   private Elvis() {...}

   public void leaveTheBuilding() {...}
}

private 생성자는 public static final 필드인 Elvis.INSTANCE를 초기화할 때 딱 한번만 호출된다.
접근제한자 public, protected 생성자가 없으므로 Elvis 클래스가 초기활될 때 만들어진 인스턴스가 전체 시스템에서 하나뿐임이 보장된다.
예외는 한 가지있다. 권한이 있는 클라이언트는 리플랙션 API인 AccessibleObject.setAccssible을 사용해 private 생성자를 호출할 수 있다.
이러한 공격을 방어하려면 생성자를 수정하여 두 번째 객체가 생성되려 할 때 예외를 던지게 하면 된다.

- 두 번째 정적 팩터리 메서드를 public static 멤버로 제공한다.

public class Eivis {
   private static final Elvis INSTANCE = new Elvis();
   private ELvis() {...}
   public static Elvis getInstance() { return INSTANCE; }

   public void leaveTheBuilding() {...}
}


