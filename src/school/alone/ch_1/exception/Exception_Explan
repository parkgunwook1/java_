프로그램 작석 중 실수로 발생하는 컴파일 오류, 실행 중인 프로그램이 의도하지 않은 동작을 하거나 프로그램이 중지되는 실행 오류로 나뉜다.

실행 오류 중 프로그램을 잘못 구현하여 의도한 바와 다르게 실행되어 생기는 오류를 버그라고 한다.  컴파일 오류는 대부분 원인을 알 수 있다.
하지만 프로그램 실행 중에 발생하는 오류는 예측하기 어려운 경우가 많고, 프로그램이 비정상 종료 되면서 갑자기 멈춰 버린다.

실행 오류는 크게 두 가지로 나뉜다.
자바 가상 머신에서 발생하는 시스템 오류이고 다른 하나는 예외이다.
시스템 오류 예로는 사용 가능한 동적 메모리가 없는 경우나 스택 메모리의 오버플로가 발생한 경우 등을 들 수 있다. 이러한 시스템 오류는 프로그램에서 제어할 수 없다.
반면 예외는 프로그램에서 제어할 수 있다.

오류 쿨랴수눈 모두 Throwable 클래스에서 상속 받는다.

예외 최상위 클래스는 Exception 클래스이다. IOException 이, RuntimeException 등이 있다.

자바에서 파일을 읽고 쓰는데 스트림 객체를 사용한다.

예외 처리 한다고해서 프로그램의 예외 상황 자체를 막을 수는 없다. 하지만 예외 처리를 하면 예외 상황을 알려주는 메시지를 볼 수 있고, 프로그램이 비정상 종료되지 않고 계속
수행되도록 만들 수 있다.

시스템에 허용하는 자원은 한정적이므로 리소스를 열기만 하고 닫지 않으면 문제가 발생한다.
리소스란? 시스템에서 사용하는 자원을 말한다. 예를 들어 파일이나 네트워크, 데이터베이스 연결 등이 리소스에 해당된다.
정상적으로나 비정상적으로 끝나도 close 메서드로 리소스를 닫아야 한다. try,catch 둘 다 사용.

finally 블록은 어떤 경우에도 실행한다. return 문이 있어도 실행함.

try-with-resources // AutoCloseable 인터페이스는 close() 메서드가 있고 이를 구현한 close 를 명시적으로 호출하지 않아도 close 메서드 부분이 호출된다.

예외 처리를 미루는 throws -> 예외를 해당 메서드에서 처리하지 않고 미룬 후 메서드를 호출하여 사용하는 부분에서 예외를 처리하는 방법이다.