Stack & Queue

Stack<E> 클래스
Stack 클래스는 List 컬렉션 클래스의 Vector 클래스를 상속받아, 전형적인 스택 메모리 구조의 클래스를 제공한다.

스택 메모리 구조는 선형 메모리 공간에 데이터를 저장하면서 후입선출(LIFO)의 시멘틱을 따르는 자료구조이다.
즉, 가장 나중에 저장된(PUSH) 데이터가 가장 먼저 인출(POP)되는 구조이다.

예 : Stack <Integer> st = new Stack<Integer>();

Stack 클래스는 스택 메모리 구조를 표현하기 위해, Vector 클래스의 메소드를 5개만 상속받아 사용한다.
1. boolean empty(); -> 해당 스택 비어있다면 true, 비어 있지 않다면 false 반환
2. peek() -> 해당 스택의 제일 상단에 있는(제일 마지막으로 저장된) 요소를 반환함
3. pop() -> 해당 스택의 제일 상단에 있는(제일 마지막으로 지정된) 요소를 반환하고, 해당 요소를 스택에서 제거한다.
4. push() -> 해당 스택의 제일상단에 전달된 요소를 삽입함.
5. int search() -> 해당 스택에서 전달된 객체가 존재하는 위치의 인덱스 반환함/
                 > 이때 인덱스는 제일 상단에 있는(제일 마지막으로 저장된) 요소의 위치부터 0이 아닌 1부터 시작한다.

더욱 복잡하고 빠른 스택을 구현하고 싶다면 Deque 인터페이스를 구현한 ArrayDeque 클래스를 사용하면 된다.
예제 : Deque<Interger> st = new ArrayDeque<Integer>();


Queue<E> 인터페이스
클래스로 구현된 스택과는 달리 자바에서 큐 메모리 구조는 별도의 인터페이스 형태로 제공된다.
이러한 Queue 인터페이스를 상속받는 하위 인터페이그는 다음과 같다.
1. Deque
2. BlockingDeque
3. BlockingQueue
4. TransferQueue

따라서 Queue 인터페이스를 직간접적으로 구현한 클래스는 상당히 많다.
그중에서도 Deque 인터페이스를 구현한 LinkedList 클래스가 큐 메모리 구조를 구현하느 데 가장 많이 사용된다.

큐 메모리 구조는 선형 메모리 공간에 데이터를 저장하면서 선입선출(FIFO)의 시멘틱을 따르는 자료구조 이다.
즉, 가장 먼저 저장된 데이터가 가장 먼저 인출되는  구조이다.

Queue 인터페이스는 큐 메모리 구조를 표현하기 위해, Collection 인터페이스 메소드만을 상속받아 사용한다.

더욱 복잡하고 빠른 큐를 구현하고 싶다면 Deque 인터페이스를 구현한 ArrayDeque 클래스를 사용하면 된다.
예) Deque<Integer> qu = new ArrayDeque<Integer>();