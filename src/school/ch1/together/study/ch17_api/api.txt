---
title: API
created: 2023-10-19 12:48
---
> [!api]
>- import java.lang.*;
>-   생략가능. 보이진 않지만 항상 자동으로 모든 클래스에는 java.lang 패키지 내부의 클래스가 import 되어있음.

>-   String 클래스의 toString() 메소드의 경우 실제 담겨있는 문자열을 반환하도록 오버라이딩 되어있음.

>-   String 클래스의 equals() 메소드의 경우 주소값 비교가 아닌 문자열 비교를 하도록 오버라이딩 되어있음.
>-   String 클래스의 hashcode() 메소드는 주소값 기반이 아닌 실제 담긴 문자열 기반으로 값을 10진수 값을 반환해준다.

>-   리터럴 값은 상수풀(String pool)에 올라감
>-   String pool : 동일한 문자열 존재 불가.

>-   new 연산자로 문자열을 작성한 것은 상수풀에 올라가는 것이 아니라, 힙 메모리에 올라간다.

>-   new 연산자를 이용해 문자열을 만들면 스택에서 힙 메모리에 따로 올리기 때문에 주소값이 다르다.
>-   반면, 리터럴은 상수풀에 저장함으로 주소값은 동일하다.

>-   요즘에는 상수풀로 많이 사용한다. 메모리가 효율적이다.

>-   기존의 상수풀의 연결이 끊긴 문자열들은 가비지 컬레터가 알아서 정리해줌.
>-   불변이라고해서 수정이 아예 안되는게 아니라
>-   기존의 저장공간(원래있던 주소값)에서 수정되는 개념이 아니라 매번
>-   새로운주소값을 참조하게됨

>-   정수형 변수는 해당 변수에 정수 값이 직접 스택 메모리에 저장된다.
>-   논리형 변수는 논리 값이 직접 스택 메모리에 저장된다.
>-   문자열 String은 문자열의 객체 참조(주소)가 스택에 저장되고, 문자열은 힙 메모리에 저장된다.

# API

---




API
import java.lang.*;
생략가능. 보이진 않지만 항상 자동으로 모든 클래스에는 java.lang 패키지 내부의 클래스가 import 되어있음.

String 클래스의 toString() 메소드의 경우 실제 담겨있는 문자열을 반환하도록 오버라이딩 되어있음.

String 클래스의 equals() 메소드의 경우 주소값 비교가 아닌 문자열 비교를 하도록 오버라이딩 되어있음.
String 클래스의 hashcode() 메소드는 주소값 기반이 아닌 실제 담긴 문자열 기반으로 값을 10진수 값을 반환해준다.

리터럴 값은 상수풀(String pool)에 올라감
String pool : 동일한 문자열 존재 불가.

new 연산자로 문자열을 작성한 것은 상수풀에 올라가는 것이 아니라, 힙 메모리에 올라간다.

new 연산자를 이용해 문자열을 만들면 스택에서 힙 메모리에 따로 올리기 때문에 주소값이 다르다.
반면, 리터럴은 상수풀에 저장함으로 주소값은 동일하다.

요즘에는 상수풀로 많이 사용한다. 메모리가 효율적이다.

기존의 상수풀의 연결이 끊긴 문자열들은 가비지 컬레터가 알아서 정리해줌.
불변이라고해서 수정이 아예 안되는게 아니라
기존의 저장공간(원래있던 주소값)에서 수정되는 개념이 아니라 매번
새로운주소값을 참조하게됨

정수형 변수는 해당 변수에 정수 값이 직접 스택 메모리에 저장된다.
논리형 변수는 논리 값이 직접 스택 메모리에 저장된다.
문자열 String은 문자열의 객체 참조(주소)가 스택에 저장되고, 문자열은 힙 메모리에 저장된다.