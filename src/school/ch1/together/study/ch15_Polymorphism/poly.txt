다형성이란 하나의 객체가 여러 가지 타입을 가질 수 있는 것을 의미한다.

자바에서는 이러한 다형성을 부모 클래스 타입의 참조 변수로 자식 클래스 타입의 인스턴스를 참조할 수 있도록 하여 구현하고 있다.
다형성은 상속, 추상화와 더불어 객체지향 프로그래밍을 구성하는 중요한 특징 중 하나이다.

참조 변수 다형성

참조 변수의 다형성 보여주는 예제
class Parent { ... }
class Child extends Parent { .. }

Parent pa = new Parent(); //허용
Child ch = new Child(); //허용
Parent pc = new Child(); //허용
Child cp = new Parent(); // 오류발생

즉,
- 부모 클래스는 부모 클래스를 가질 수 있고
- 자식 클래스는 자식 클래스를 가질 수 있고
- 부모 클래스는 자식 클래스를 가질 수 있고
- 자식 클래스는 부모 클래스를 못가진다.

특정 타입의 참조변수로는 당연히 같은 타입의 인스턴스를 참조할 수 있다.


참조변수의 타입 변환
(자바에서는 참조 변수도 다음과 같은 조건에 따라 타입 변환을 할 수 있다.)
1. 서로 상속 관계에 있는 클래스 사이에만 타입 변환을 할 수 있다.
2. 자식 클래스 타입에서 부모 클래스 타입으로의 타입 변환은 생략할 수 있다.
3. 하지만 부모 클래스 타입에서 자식 클래스 타입으로의 타입 변환은 반드시 명시해야 한다.

참조변수의 타입 변환 문법
(변환할타입의클래스이름) 변환할참조변수

class Parent { ... }
class Child extends Parent { ... }
class Brother extends Parent { ... }

Parent pa01 = null;
Child ch = new Child();
Parent pa02 = new Parent();
Brother br = null;

pa01 = ch;  // 타입변환 생략할 수있음. ( Parent pa = new Child)
br = (Brother)pa02; // 타입 변환 생략할 수 없음 > Brother br = new Parent > 상속 받아서 객체 생성 가능 하지만 타입변환 해야함
br= (Brother)ch; // 직접적인 상속 관계가 아니므로, 오류 발생 ( Brother br = new Child) 상속 받지 않아서 불가능


instanceof 연산자
이러한 다형성으로 인해 런타임에 참조 변수가 실제로 참조하고 있는 인스턴스의 타입을 확인할 필요성이 생긴다.
자바에선 instanceof 연산자 제공하며, 참조 변수가 참조하고 있는 인스턴스의 실제 타입을 확인할 수 있도록 해준다.

문법
참조변수 instanceof 클래스 이름
왼쪽에 전달된 참조변수가 실제로 참조하고 있는 인스턴스의 타입이 오른쪽에 전달된 클래스 타입이면 true, 아니면 false 반환s